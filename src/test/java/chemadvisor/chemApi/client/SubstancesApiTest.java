/**
 * chemadvisor.io api
 * REST api to access ChemADVISOR maintained substance and regulatory data.
 *
 * OpenAPI spec version: 0.9.6 beta
 * Contact: support@chemadvisor.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package chemadvisor.chemApi.client;

import chemadvisor.chemApi.ApiException;
import chemadvisor.chemApi.model.ApiResponseMessage;
import chemadvisor.chemApi.model.RelatedSubstances;
import chemadvisor.chemApi.model.Substance;
import chemadvisor.chemApi.model.Identifiers;
import chemadvisor.chemApi.model.Inventories;
import chemadvisor.chemApi.model.RegulatoryLists;
import chemadvisor.chemApi.model.SubstanceNames;
import chemadvisor.chemApi.model.Substances;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubstancesApi
 */
public class SubstancesApiTest {

    private final SubstancesApi api = new SubstancesApi();

    
    /**
     * Links to related substances
     *
     * Returns a collection of links to related substances
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRelatedSubstancesTest() throws ApiException {
        String substanceId = null;
        String appKey = null;
        String appId = null;
        // RelatedSubstances response = api.getRelatedSubstances(substanceId, appKey, appId);

        // TODO: test validations
    }
    
    /**
     * Find substance by ID
     *
     * Returns a single substance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceTest() throws ApiException {
        String substanceId = null;
        String appKey = null;
        String appId = null;
        // Substance response = api.getSubstance(substanceId, appKey, appId);

        // TODO: test validations
    }
    
    /**
     * A substance&#39;s public identifiers
     *
     * Returns a collection of public identifiers for a substance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceIdentifiersTest() throws ApiException {
        String substanceId = null;
        String appKey = null;
        String appId = null;
        // Identifiers response = api.getSubstanceIdentifiers(substanceId, appKey, appId);

        // TODO: test validations
    }
    
    /**
     * A substance&#39;s inventory status
     *
     * Returns a collection of inventory objects for a substance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceInventoryHitsTest() throws ApiException {
        String substanceId = null;
        String appKey = null;
        String appId = null;
        // Inventories response = api.getSubstanceInventoryHits(substanceId, appKey, appId);

        // TODO: test validations
    }
    
    /**
     * LOLI lists containing this substance
     *
     * Returns a paginated collection of list objects for lists contain this substance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceListHitsTest() throws ApiException {
        String substanceId = null;
        Integer limit = null;
        Integer offset = null;
        String q = null;
        String appKey = null;
        String appId = null;
        // RegulatoryLists response = api.getSubstanceListHits(substanceId, limit, offset, q, appKey, appId);

        // TODO: test validations
    }
    
    /**
     * Get a Specific Substance&#39;s names
     *
     * Gets a collection of **name** objects Required path param of &#39;substance_id&#39; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstanceNamesTest() throws ApiException {
        String substanceId = null;
        String appKey = null;
        String appId = null;
        // SubstanceNames response = api.getSubstanceNames(substanceId, appKey, appId);

        // TODO: test validations
    }
    
    /**
     * All Substances
     *
     * A paginated collection of substances
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubstancesTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String q = null;
        String appKey = null;
        String appId = null;
        // Substances response = api.getSubstances(limit, offset, q, appKey, appId);

        // TODO: test validations
    }
    
}
