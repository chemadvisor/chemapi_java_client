/**
 * chemadvisor.io api
 * REST api to access ChemADVISOR maintained substance and regulatory data.
 *
 * OpenAPI spec version: 0.9.6 beta
 * Contact: support@chemadvisor.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package chemadvisor.chemApi.client;

import chemadvisor.chemApi.ApiCallback;
import chemadvisor.chemApi.ApiClient;
import chemadvisor.chemApi.ApiException;
import chemadvisor.chemApi.ApiResponse;
import chemadvisor.chemApi.Configuration;
import chemadvisor.chemApi.Pair;
import chemadvisor.chemApi.ProgressRequestBody;
import chemadvisor.chemApi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import chemadvisor.chemApi.model.ApiResponseMessage;
import chemadvisor.chemApi.model.Releases;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReleasesApi {
    private ApiClient apiClient;

    public ReleasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReleasesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getReleases */
    private com.squareup.okhttp.Call getReleasesCall(Integer limit, Integer offset, String q, String appKey, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/releases".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (appKey != null)
        localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));
        if (appId != null)
        localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * All Releases
     * A paginated collection of Releases
     * @param limit Number of items to retrieve (optional, default to 10)
     * @param offset Offset of the first item returned (optional, default to 0)
     * @param q Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)
     * @param appKey  (optional)
     * @param appId  (optional)
     * @return Releases
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Releases getReleases(Integer limit, Integer offset, String q, String appKey, String appId) throws ApiException {
        ApiResponse<Releases> resp = getReleasesWithHttpInfo(limit, offset, q, appKey, appId);
        return resp.getData();
    }

    /**
     * All Releases
     * A paginated collection of Releases
     * @param limit Number of items to retrieve (optional, default to 10)
     * @param offset Offset of the first item returned (optional, default to 0)
     * @param q Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)
     * @param appKey  (optional)
     * @param appId  (optional)
     * @return ApiResponse&lt;Releases&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Releases> getReleasesWithHttpInfo(Integer limit, Integer offset, String q, String appKey, String appId) throws ApiException {
        com.squareup.okhttp.Call call = getReleasesCall(limit, offset, q, appKey, appId, null, null);
        Type localVarReturnType = new TypeToken<Releases>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * All Releases (asynchronously)
     * A paginated collection of Releases
     * @param limit Number of items to retrieve (optional, default to 10)
     * @param offset Offset of the first item returned (optional, default to 0)
     * @param q Search filter is based on the syntax used for find in mongoDB.  For more information, visit &lt;a href&#x3D;\&quot;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ\&quot; target&#x3D;\&quot;blank\&quot;&gt;https://developer.chemadvisor.io/docs/integrate/codeExamplesQ&lt;/a&gt;. (optional)
     * @param appKey  (optional)
     * @param appId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReleasesAsync(Integer limit, Integer offset, String q, String appKey, String appId, final ApiCallback<Releases> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReleasesCall(limit, offset, q, appKey, appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Releases>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
